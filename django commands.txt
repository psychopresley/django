- Start a new project: django-admin startproject 'ProjectName'

- Start a new app: python manage.py startapp 'AppName'

- Running the server: python manage.py runserver

- Activate/deactivate the virtual environment: activate/deactivate 'Env Name'

- List the vEnvs: conda info --envs

- Create vEnvs: conda create --name 'EnvName' django

=============================================================================

Creating an App:

1 - Start a new app: python manage.py startapp 'AppName';

2 - settings.py -> INSTALLED APPS -> add string with the name of the app;

3 - views.py -> def index(request):

4 - urls.py -> from AppName import views / from django.urls import path, include -> urlpatterns -> add path('App folder/', include('App Folder.urls'))


=============================================================================

Creating a Template:

1 - Create 'templates' folder inside the project folder;

2 - Settings.py -> TEMPLATE_DIR = BASE_DIR.joinpath('templates'); -> TEMPLATES.DIRS = [TEMPLATE_DIR,],

3 - Create folder of the App inside the templates folder;

4 - views.py -> create function def index(request): return render(request, 'App folder/index.html')


=============================================================================

Creating a Static files folder:

1 - Create 'static' folder inside the project folder;

2 - Settings.py -> STATIC_DIR = BASE_DIR.joinpath('static'); -> under STATIC_URL (in the end): STATICFILES_DIRS = [STATIC_DIR,],

3 - Create folder of the App inside the static folder;

4 - Use template tag to reference the files in the HTML document


=============================================================================

Creating a Form:

1 - Create 'forms_page.html' in the application template's folder (same of index.html);

2 - In the App's folder, create the forms.py file;

3 - forms.py -> from django import forms -> class FormName(forms.Form): -> name = forms.CharField(); email = forms.EmailField; etc.;

4 - views.py -> from . import forms;

5 - def form_name_view(request):
 -> form = forms.FormName()

 -> if request.method == 'POST':
	form = forms.FormName(request.POST)

	if form.is_valid():
		# Do omething here
		form.cleaned_data['name' or 'email or etc]

 -> return render(request,'app folder/form_page.html', {'form':form});

6 - In the form page -> <body> <form method='post'> {{form.as_p}}{% csrf_token %}


=============================================================================

Creating a Model:

1 - App folder -> models.py ->
	class Topic(models.Model):
		top_name = models.CharField(max_length=264);

	def __str__(self):
		return #some string content

2 - Migrate db: python manage.py makemigrations app_name -> python manage.py migrate app_name

3 - Confirm migration: python manage.py shell -> from app_name.models import class_name (ex: CountryReport) -> print(class_name.objects.all())

4 - register the models in admin.py -> from report.models import Country, CountryInfo, CountryReport ->

# Register models in admin.py:

admin.site.register(Country)
admin.site.register(CountryInfo)
admin.site.register(StatusReport)

5 - Create superuser -> python manage.py createsuperuser



=============================================================================

Connecting models - templates - views:

1 - Views.py -> from 'App name'.models import 'Model name' ->

def index(request):
    var = Country.objects.order_by('column name')
    var_dict = {'key name': var}

    return render(request,'App name'/'page name'.html, context=var_dict)



=============================================================================

Protecting passwords:

1 - pip install bcrypt and pip install django[argon2];

2 - Settings.py -> insert anywhere (better after the password comment):

PASSWORD_HASHERS = [
	'django.contrib.auth.hashers.Argon2PasswordHasher',
	'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
	'django.contrib.auth.hashers.BCryptPasswordHasher',
	'django.contrib.auth.hashers.PBKDF2PasswordHasher',
	'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

3 - Include or modify the desired validators in AUTH_PASSWORD_VALIDATORS


===========================================================================

Customizing Admin Page:

1 - Inside "templates" folder create "admin" folder and include "base_site.html";

2 - On "django/django/contrib/admin/templates/admin/base_site.html" Github page copy html content;


===========================================================================

Debug toolbar:

1 - pip install django-debug-toolbar;

2 - Settings.py -> INSTALLED_APPS (after 'staticfiles')-> 'debug_toolbar';
                -> MIDDLEWARE -> include 'debug_toolbar.middleware.DebugToolbarMiddleware',
                -> At the end of the file -> INTERNAL_IPS = ['127.0.0.1']

3 - On project urls.py (not the app urls.py) ->

from django.conf import settings

if settings.DEBUG:
    import debug_toolbar
    urlpatterns.append(path('__debug__/', include(debug_toolbar.urls)))

4 - run server


===========================================================================

Creating a custom filter:

1 - On app folder create "templatetags" folder with __ini__.py file;

2 - create a "any name".py file to store your custom filters;

3 - import modules and create the functions. Example:

    from django import template

    @register.filter(name='name of the filter to be called on html template')
    register = template.Library()

    def cut_filter(value,arg):
        """
        put some string here.
        """

        return value.replace(arg,'')

On template html file: {% load "custom_filters .py file name" %}


===========================================================================

Creating a Class based view:

1 - On views.py -> from django.http import HttpResponse
                   from django.views.generic import View


2 - class IndexView(TemplateView):
       template_name = 'report/index.html'

       def get_context_data(self,**kwargs):
           status_date = StatusReport.objects.get(country__name='Brazil').date
           context = super().get_context_data(**kwargs)

           context['nav_index'] = 'active'
           context['report_date'] = status_date

           return context


3 - On urls.py -> path('',views.IndexView.as_view(), name='index')
